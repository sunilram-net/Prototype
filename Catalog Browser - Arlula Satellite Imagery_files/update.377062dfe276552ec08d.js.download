/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./client/scripts/client-general.ts":
/*!******************************************!*\
  !*** ./client/scripts/client-general.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_src_iframe_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/src/iframe-client */ "./client/utils/src/iframe-client.ts");
/* harmony import */ var _utils_src_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/src/forms */ "./client/utils/src/forms.ts");
/* harmony import */ var _utils_src_after__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/src/after */ "./client/utils/src/after.ts");
/* harmony import */ var _util_overlay__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/overlay */ "./client/scripts/util/overlay.ts");
/* harmony import */ var _utils_src_iframe_actions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/src/iframe-actions */ "./client/utils/src/iframe-actions.ts");





_utils_src_forms__WEBPACK_IMPORTED_MODULE_1__["default"].addBySelector();
_utils_src_iframe_client__WEBPACK_IMPORTED_MODULE_0__["default"].setMinWidth(520);
(0,_util_overlay__WEBPACK_IMPORTED_MODULE_3__.setupOverlay)();
(0,_utils_src_iframe_client__WEBPACK_IMPORTED_MODULE_0__.addConnectCallback)(_util_overlay__WEBPACK_IMPORTED_MODULE_3__.hideOverlay);
_utils_src_iframe_client__WEBPACK_IMPORTED_MODULE_0__["default"].registerMessageProcessor((evt, data) => {
    // null processor so the frameClient isn't culled in tree shaking
    if (data.type === "done" || data.type === "ok") {
        (0,_utils_src_after__WEBPACK_IMPORTED_MODULE_2__.resolvePostPageAction)(data, () => { });
    }
});
document.addEventListener("DOMContentLoaded", function () {
    const alerters = document.querySelectorAll('[action-modal="confirm"]');
    alerters.forEach((elem) => {
        elem.addEventListener("click", (evt) => {
            var _a, _b, _c, _d;
            evt.preventDefault();
            (0,_utils_src_iframe_actions__WEBPACK_IMPORTED_MODULE_4__.displayAlertModal)({
                close: true,
                title: elem.dataset.title || elem.dataset.heading || "",
                ok: ((_a = elem.dataset) === null || _a === void 0 ? void 0 : _a.ok) || "",
                cancel: ((_b = elem.dataset) === null || _b === void 0 ? void 0 : _b.cancel) || "",
                message: ((_c = elem.dataset) === null || _c === void 0 ? void 0 : _c.message) || undefined,
                messageHTML: ((_d = elem.dataset) === null || _d === void 0 ? void 0 : _d.messageHtml) || undefined,
            }).finally(() => {
                if (elem.dataset.after) {
                    (0,_utils_src_after__WEBPACK_IMPORTED_MODULE_2__.resolveActionStringWData)(elem.dataset.after, undefined, () => { });
                }
            });
        });
    });
    const framers = document.querySelectorAll('[action-modal="iframe"]');
    framers.forEach((elem) => {
        elem.addEventListener("click", (evt) => {
            var _a, _b, _c, _d;
            evt.preventDefault();
            (0,_utils_src_iframe_actions__WEBPACK_IMPORTED_MODULE_4__.displayIframeModal)({
                close: true,
                title: elem.dataset.title || elem.dataset.heading || "",
                ok: ((_a = elem.dataset) === null || _a === void 0 ? void 0 : _a.ok) || "",
                cancel: ((_b = elem.dataset) === null || _b === void 0 ? void 0 : _b.cancel) || "",
                message: ((_c = elem.dataset) === null || _c === void 0 ? void 0 : _c.message) || "",
                href: ((_d = elem.dataset) === null || _d === void 0 ? void 0 : _d.url) || "",
            })
                .then((data) => {
                if (elem.dataset.success) {
                    (0,_utils_src_after__WEBPACK_IMPORTED_MODULE_2__.resolveActionStringWData)(elem.dataset.success, data, () => { });
                }
            })
                .catch((err) => {
                if (elem.dataset.error) {
                    (0,_utils_src_after__WEBPACK_IMPORTED_MODULE_2__.resolveActionStringWData)(elem.dataset.error, err, () => { });
                }
            })
                .finally(() => {
                if (elem.dataset.after) {
                    (0,_utils_src_after__WEBPACK_IMPORTED_MODULE_2__.resolveActionStringWData)(elem.dataset.after, undefined, () => { });
                }
            });
        });
    });
});


/***/ }),

/***/ "./client/scripts/customers/update.ts":
/*!********************************************!*\
  !*** ./client/scripts/customers/update.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CustomerDetailsBlock: () => (/* binding */ CustomerDetailsBlock)
/* harmony export */ });
/* harmony import */ var _util_address__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/address */ "./client/scripts/util/address.ts");
/* harmony import */ var _util_pm_collect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/pm-collect */ "./client/scripts/util/pm-collect.ts");
/* harmony import */ var _utils_src_location__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/src/location */ "./client/utils/src/location.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class CustomerDetailsBlock {
    constructor(root) {
        this.update = false;
        this.root = root;
        this.name = this.root.querySelector('input[name="name"]');
        this.email = this.root.querySelector('input[name="email"]');
        this.phone = this.root.querySelector('input[name="phone"]');
        this.description = this.root.querySelector('input[name="description"]');
        this.collect = this.root.querySelector('input[name="collect"]');
        this.team = this.root.querySelector('input[name="team"],select[name="team"]');
        const address = this.root.querySelector('[block="address"]');
        if (address) {
            this.address = new _util_address__WEBPACK_IMPORTED_MODULE_0__.AddressBlock(address);
        }
        const methodBlock = this.root.querySelector('[block="method-collect"]');
        if (methodBlock) {
            this.method = new _util_pm_collect__WEBPACK_IMPORTED_MODULE_1__.PaymentMethodCollect(methodBlock);
            if (this.collect) {
                this.method.toggleVisibility(this.collect.checked);
                this.collect.addEventListener("input", () => {
                    var _a;
                    (_a = this.method) === null || _a === void 0 ? void 0 : _a.toggleVisibility(this.collect ? this.collect.checked : true);
                });
            }
        }
        this.update = this.root.dataset.update == "true";
        if (this.update) {
            this.id = this.root.dataset.id;
            if (!this.id) {
                console.error("error initialising customer update, no ID found");
            }
        }
        this.readForm = this.readForm.bind(this);
    }
    validateForm() {
        if (this.name) {
            if (!this.name.checkValidity()) {
                this.name.focus();
                return false;
            }
        }
        if (this.team) {
            if (!this.team.checkValidity()) {
                this.team.focus();
                return false;
            }
        }
        if (this.email) {
            if (!this.email.checkValidity()) {
                this.email.focus();
                return false;
            }
        }
        if (this.phone) {
            if (!this.phone.checkValidity()) {
                this.phone.focus();
                return false;
            }
        }
        if (this.description) {
            if (!this.description.checkValidity()) {
                this.description.focus();
                return false;
            }
        }
        if (this.address) {
            if (!this.address.validateForm()) {
                return false;
            }
        }
        if (this.method) {
            let collect = true;
            if (this.collect) {
                collect = this.collect.checked;
            }
            if (collect && !this.method.validateForm()) {
                return false;
            }
        }
        return true;
    }
    readForm(prefill) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            if (!this.validateForm()) {
                reject("form not valid");
                return;
            }
            const details = {
                id: this.id,
                collect: true,
                team: prefill.team || (0,_utils_src_location__WEBPACK_IMPORTED_MODULE_2__.findGetParameter)("team") || undefined,
                name: prefill.name,
                email: prefill.email,
                phone: prefill.phone,
            };
            if (this.team) {
                details.team = this.team.value;
            }
            if (this.name) {
                details.name = this.name.value;
            }
            if (this.email) {
                details.email = this.email.value;
            }
            if (this.phone) {
                details.phone = this.phone.value;
            }
            if (this.description) {
                details.description = this.description.value;
            }
            if (this.collect) {
                details.collect = this.collect.checked;
            }
            if (this.address) {
                try {
                    details.address = yield this.address.readForm();
                    if (details.address.external) {
                        details.address = prefill.address;
                    }
                }
                catch (e) {
                    reject(e);
                }
            }
            if (this.method && details.collect) {
                try {
                    details.method = yield this.method.readForm(details.address);
                }
                catch (e) {
                    reject(e);
                }
            }
            resolve(details);
        }));
    }
}


/***/ }),

/***/ "./client/scripts/util/address.ts":
/*!****************************************!*\
  !*** ./client/scripts/util/address.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AddressBlock: () => (/* binding */ AddressBlock)
/* harmony export */ });
/* harmony import */ var _country__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./country */ "./client/scripts/util/country.ts");

class AddressBlock {
    constructor(root) {
        this.fields = {};
        this.root = root;
        this.same = this.root.querySelector('input[name="same"]');
        this.external = this.root.querySelector('input[name="external"]');
        this.fields.all = this.root.querySelector('input[name="address-details"]');
        this.fields.street = this.root.querySelector('input[name="street"]');
        this.fields.locality = this.root.querySelector('input[name="locality"]');
        this.fields.region = this.root.querySelector('input[name="region"]');
        this.fields.routing = this.root.querySelector('input[name="routing"]');
        this.fields.country = this.root.querySelector('input[name="country"]');
        this.fieldContainers = this.root.querySelectorAll('[address-input]');
        this.attachListeners();
    }
    attachListeners() {
        this.toggleSelector = this.toggleSelector.bind(this);
        if (this.same) {
            this.same.addEventListener("input", this.toggleSelector);
        }
        if (this.external) {
            this.external.addEventListener("input", this.toggleSelector);
        }
    }
    toggleSelector() {
        console.log("toggling selector");
        const hide = (this.same && this.same.checked) || (this.external && this.external.checked);
        this.fieldContainers.forEach((field) => {
            if (hide) {
                field.classList.add("hidden");
            }
            else {
                field.classList.remove("hidden");
            }
        });
    }
    validateForm() {
        if (this.same && this.same.checked) {
            return true;
        }
        if (this.external && this.external.checked) {
            return true;
        }
        if (this.fields.all) {
            if (!this.fields.all.checkValidity()) {
                return false;
            }
            return true;
        }
        if (!this.fields.street ||
            !this.fields.locality ||
            !this.fields.region ||
            !this.fields.routing ||
            !this.fields.country) {
            return false;
        }
        if (!this.fields.street.checkValidity() ||
            !this.fields.locality.checkValidity() ||
            !this.fields.region.checkValidity() ||
            !this.fields.routing.checkValidity() ||
            !this.fields.country.checkValidity()) {
            return false;
        }
        return true;
    }
    readForm() {
        return new Promise((resolve, reject) => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            const result = {
                same: false,
                external: false,
                // street: "",
                // locality: "",
                // region: "",
                // routing: "",
                // country: "",
            };
            if (this.same && this.same.checked) {
                result.same = true;
                resolve(result);
                return;
            }
            if (this.external && this.external.checked) {
                result.external = true;
                resolve(result);
                return;
            }
            if (this.fields.all) {
                result.inline = ((_b = (_a = this.fields) === null || _a === void 0 ? void 0 : _a.all) === null || _b === void 0 ? void 0 : _b.value) || "";
                resolve(result);
                return;
            }
            result.street = ((_d = (_c = this.fields) === null || _c === void 0 ? void 0 : _c.street) === null || _d === void 0 ? void 0 : _d.value) || "";
            result.locality = ((_f = (_e = this.fields) === null || _e === void 0 ? void 0 : _e.locality) === null || _f === void 0 ? void 0 : _f.value) || "";
            result.region = ((_h = (_g = this.fields) === null || _g === void 0 ? void 0 : _g.region) === null || _h === void 0 ? void 0 : _h.value) || "";
            result.routing = ((_k = (_j = this.fields) === null || _j === void 0 ? void 0 : _j.routing) === null || _k === void 0 ? void 0 : _k.value) || "";
            result.country = ((_m = (_l = this.fields) === null || _l === void 0 ? void 0 : _l.country) === null || _m === void 0 ? void 0 : _m.value) || "";
            (0,_country__WEBPACK_IMPORTED_MODULE_0__.lookupCountry)(result.country)
                .then((code) => {
                var _a, _b;
                result.countryCode = code || ((_b = (_a = this.fields) === null || _a === void 0 ? void 0 : _a.country) === null || _b === void 0 ? void 0 : _b.value) || "";
                resolve(result);
            });
        });
    }
}


/***/ }),

/***/ "./client/scripts/util/country.ts":
/*!****************************************!*\
  !*** ./client/scripts/util/country.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   lookupCountry: () => (/* binding */ lookupCountry)
/* harmony export */ });
function lookupCountry(name) {
    return fetch(`/payments/handler/country?q=${name}`, {
        credentials: "include",
    })
        .then((resp) => {
        if (!resp.ok) {
            resp.text()
                .then((body) => {
                console.error("error looking up card country: ", body);
            });
            return undefined;
        }
        if (resp.status == 204) {
            return undefined;
        }
        return resp.text();
    });
}


/***/ }),

/***/ "./client/scripts/util/overlay.ts":
/*!****************************************!*\
  !*** ./client/scripts/util/overlay.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hideOverlay: () => (/* binding */ hideOverlay),
/* harmony export */   setupOverlay: () => (/* binding */ setupOverlay),
/* harmony export */   showOverlay: () => (/* binding */ showOverlay)
/* harmony export */ });
function setupOverlay() {
    const overlay = document.querySelector(`[connecting-overlay]`);
    if (!overlay) {
        return;
    }
    setTimeout(() => {
        const connecting = overlay.querySelector(`[prompt-connecting]`);
        const timeout = overlay.querySelector(`[prompt-timeout]`);
        if (connecting) {
            connecting.classList.add("hidden");
        }
        if (timeout) {
            timeout.classList.remove("hidden");
        }
    }, 10000);
}
function showOverlay() {
    const overlay = document.querySelector(`[connecting-overlay]`);
    if (!overlay) {
        return;
    }
    overlay.classList.remove("hidden");
}
function hideOverlay() {
    const overlay = document.querySelector(`[connecting-overlay]`);
    if (!overlay) {
        return;
    }
    overlay.classList.add("hidden");
}


/***/ }),

/***/ "./client/scripts/util/pm-collect.ts":
/*!*******************************************!*\
  !*** ./client/scripts/util/pm-collect.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PaymentMethodCollect: () => (/* binding */ PaymentMethodCollect)
/* harmony export */ });
/* harmony import */ var _stripeError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stripeError */ "./client/scripts/util/stripeError.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class PaymentMethodCollect {
    constructor(root) {
        this.root = root;
        const key = document.body.dataset.stripe;
        if (!key) {
            throw ("Unable to load stripe connection, key not provided");
        }
        let options;
        if (document.body.dataset.account) {
            options = {
                stripeAccount: document.body.dataset.account,
            };
        }
        this.stripeInst = Stripe(key, options);
        this.elements = this.stripeInst.elements();
        this.name = this.root.querySelector('input[name="card-name"]');
        this.email = this.root.querySelector('input[name="card-email"]');
        this.phone = this.root.querySelector('input[name="card-phone"]');
        // TODO: populate styles
        const stripeOptions = {
            style: {
                base: {
                    "::placeholder": {
                        color: "transparent",
                    },
                },
            },
        };
        let element = this.root.querySelector(`[stripe-card-element]`);
        if (element) {
            this.card = this.elements.create("cardNumber", stripeOptions);
            this.card.mount(element);
            (0,_stripeError__WEBPACK_IMPORTED_MODULE_0__.stripeError)(this.card, element, this.root.querySelector("#card-element-error"));
        }
        element = this.root.querySelector(`[stripe-exp-element]`);
        if (element) {
            this.expiry = this.elements.create("cardExpiry", stripeOptions);
            this.expiry.mount(element);
            (0,_stripeError__WEBPACK_IMPORTED_MODULE_0__.stripeError)(this.expiry, element, this.root.querySelector("#exp-element-error"));
        }
        element = this.root.querySelector(`[stripe-ccv-element]`);
        if (element) {
            this.ccv = this.elements.create("cardCvc", stripeOptions);
            this.ccv.mount(element);
            (0,_stripeError__WEBPACK_IMPORTED_MODULE_0__.stripeError)(this.ccv, element, this.root.querySelector("#ccv-element-error"));
        }
        this.readForm = this.readForm.bind(this);
    }
    readForm(address) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            if (this.result) {
                resolve(this.result);
                return;
            }
            if (!this.card) {
                reject("error reading form, payment fields not attached");
                return;
            }
            if (this.result) {
                resolve(this.result);
                return;
            }
            if (!this.validateForm()) {
                reject({ state: "incomplete", reason: "form not complete" });
                return;
            }
            const options = {
                payment_method: {
                    card: this.card,
                    billing_details: {
                        name: (_a = this.name) === null || _a === void 0 ? void 0 : _a.value,
                        email: ((_b = this.email) === null || _b === void 0 ? void 0 : _b.value) || this.root.dataset.email || undefined,
                        phone: ((_c = this.phone) === null || _c === void 0 ? void 0 : _c.value) || this.root.dataset.phone || undefined,
                        address: address ? {
                            city: address.locality,
                            country: address.countryCode,
                            line1: address.street,
                            // line2: ???
                            postal_code: address.routing,
                            state: address.region,
                        } : undefined,
                    }
                }
            };
            // console.log("sending to stripe: ", options);
            this.stripeInst.confirmCardSetup(this.root.dataset.secret, options)
                .then((response) => {
                if (response.error) {
                    reject(response.error);
                }
                else {
                    this.result = response.setupIntent;
                    resolve(this.result);
                }
            });
        }));
    }
    validateForm() {
        if (this.name) {
            if (!this.name.checkValidity()) {
                this.name.focus();
                return false;
            }
        }
        if (this.email) {
            if (!this.email.checkValidity()) {
                this.email.focus();
                return false;
            }
        }
        if (this.phone) {
            if (!this.phone.checkValidity()) {
                this.phone.focus();
                return false;
            }
        }
        if (this.card && !this.card.valid) {
            this.card.focus();
            return false;
        }
        if (this.expiry && !this.expiry.valid) {
            this.expiry.focus();
            return false;
        }
        if (this.ccv && !this.ccv.valid) {
            this.ccv.focus();
            return false;
        }
        return true;
    }
    toggleVisibility(visible) {
        if (visible) {
            this.root.classList.remove("hidden");
        }
        else {
            this.root.classList.add("hidden");
        }
    }
}


/***/ }),

/***/ "./client/scripts/util/stripeError.ts":
/*!********************************************!*\
  !*** ./client/scripts/util/stripeError.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   stripeError: () => (/* binding */ stripeError)
/* harmony export */ });
const stripeClasses = {
    "StripeElement--empty": ["input-empty", "input-content"],
    "StripeElement--valid": "input-valid",
    "StripeElement--invalid": "input-invalid",
};
function stripeError(element, container, errorContainer) {
    element.addEventListener('change', function (event) {
        var _a, _b, _c, _d, _e, _f, _g;
        if (event) {
            if (event.error) {
                errorContainer.textContent = event.error.message;
                element.valid = false;
            }
            else {
                errorContainer.textContent = '';
                element.valid = true;
            }
            // populate parent classes
            for (let key in stripeClasses) {
                if (container.classList.contains(key)) {
                    if (Array.isArray(stripeClasses[key])) {
                        (_a = container.parentElement) === null || _a === void 0 ? void 0 : _a.classList.add(stripeClasses[key][1]);
                        (_b = container.parentElement) === null || _b === void 0 ? void 0 : _b.classList.remove(stripeClasses[key][0]);
                    }
                    else {
                        (_c = container.parentElement) === null || _c === void 0 ? void 0 : _c.classList.add(stripeClasses[key]);
                    }
                }
                else {
                    if (Array.isArray(stripeClasses[key])) {
                        (_d = container.parentElement) === null || _d === void 0 ? void 0 : _d.classList.remove(stripeClasses[key][1]);
                        (_e = container.parentElement) === null || _e === void 0 ? void 0 : _e.classList.add(stripeClasses[key][0]);
                    }
                    else {
                        (_f = container.parentElement) === null || _f === void 0 ? void 0 : _f.classList.remove(stripeClasses[key]);
                    }
                }
            }
            if (event.complete) {
                (_g = container.parentElement) === null || _g === void 0 ? void 0 : _g.classList.add("input-content");
            }
        }
    });
    element.on("focus", () => { var _a; (_a = container.parentElement) === null || _a === void 0 ? void 0 : _a.classList.add("input-focus"); });
    element.on("blur", () => { var _a; (_a = container.parentElement) === null || _a === void 0 ? void 0 : _a.classList.remove("input-focus"); });
}


/***/ }),

/***/ "./client/utils/src/after.ts":
/*!***********************************!*\
  !*** ./client/utils/src/after.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   finalizePage: () => (/* binding */ finalizePage),
/* harmony export */   finalizeString: () => (/* binding */ finalizeString),
/* harmony export */   resolveActionStringWData: () => (/* binding */ resolveActionStringWData),
/* harmony export */   resolvePostPageAction: () => (/* binding */ resolvePostPageAction)
/* harmony export */ });
/* harmony import */ var _location__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./location */ "./client/utils/src/location.ts");
/* harmony import */ var _iframe_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iframe-client */ "./client/utils/src/iframe-client.ts");


function finalizePage(fallback) {
    var _a;
    // get finalize action
    const method = (0,_location__WEBPACK_IMPORTED_MODULE_0__.findGetParameter)("f");
    finalizeString(method || ((_a = document.body.dataset) === null || _a === void 0 ? void 0 : _a.after) || "", fallback);
}
function finalizeString(method, fallback) {
    if (!method) {
        // don't have direct handle to listener iframe, ask whole container window to reload
        fallback(undefined);
        return;
    }
    resolveActionStringWData(method, undefined, fallback);
}
function resolvePostPageAction(data, fallback) {
    // get finalize action
    const method = (0,_location__WEBPACK_IMPORTED_MODULE_0__.findGetParameter)("f");
    resolveActionStringWData(method, data, fallback);
}
function resolveActionStringWData(method, data, fallback) {
    if (!method) {
        // no action provided, resolve default
        fallback(data);
        return;
    }
    // parse actions list
    const methodArgs = method.split(";").map((v) => {
        return v.split(":");
    });
    // resolve actions
    argHandler(methodArgs, data);
}
function argHandler(argSet, data) {
    const args = argSet.shift();
    if (!args) {
        // list exhausted
        return;
    }
    switch (args[0]) {
        case "msg":
            // send arbitrary message flag to container
            _iframe_client__WEBPACK_IMPORTED_MODULE_1__["default"].sendMessage(args[1], { data: args.slice(2) });
            break;
        case "ok":
        case "done":
        case "close":
        case "cancel":
            _iframe_client__WEBPACK_IMPORTED_MODULE_1__["default"].sendMessage(args[0], { data: data, args: args.slice(1) });
            break;
        case "back":
            location.href = document.referrer;
            break;
        case "nav":
            // navigate current page (inside iframe)
            location.href = args[1];
            break;
        case "containerNav":
            // tell container to navigate
            _iframe_client__WEBPACK_IMPORTED_MODULE_1__["default"].sendMessage("pageNavigate", { href: args[1], newWindow: args[2] === "true" });
            break;
        case "delay":
            // wait some time (i.e. just told container to hide modal, wait, then reload)
            setTimeout(() => { argHandler(argSet, data); }, parseInt(args[1]) || 100);
            return;
        case "reload":
            // reload current page (inside iframe)
            location.reload();
            break;
        case "containerReload":
            // tell container to reload
            _iframe_client__WEBPACK_IMPORTED_MODULE_1__["default"].sendMessage("reload", {});
            break;
        case "request":
            miniRequest(args[1], args.slice(2).join(":"))
                .finally(() => {
                argHandler(argSet, data);
            });
            return;
        default:
            console.error("Unknown after action: ", args[0]);
    }
    argHandler(argSet, data);
}
function miniRequest(method, url) {
    return fetch(url, {
        method: method,
        credentials: "include",
    });
}


/***/ }),

/***/ "./client/utils/src/forms.ts":
/*!***********************************!*\
  !*** ./client/utils/src/forms.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addAllInput: () => (/* binding */ addAllInput),
/* harmony export */   addInput: () => (/* binding */ addInput),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   validateField: () => (/* binding */ validateField)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    addInput,
    addBySelector: addAllInput,
    validateField: function (input) {
        return validateField({ target: input });
    },
});
function addInput(input) {
    if (input) {
        const elem = input;
        // attach events
        elem.addEventListener('input', validateField);
        elem.addEventListener('blur', validateField);
        elem.addEventListener('focus', focusEvent);
        elem.addEventListener('blur', focusEvent);
        // get container
        let current = elem;
        while (current.parentElement) {
            current = current.parentElement;
            if (current.classList.contains("input-container")) {
                elem.container = current;
                // use new selector and legacy selector by class on div
                const errors = elem.container.querySelector("[errors], .error, .errors");
                if (errors) {
                    elem.errors = errors;
                    // ensure all errors are hidden
                    for (let i = 0; i < errors.children.length; i++) {
                        errors.children[i].classList.add("hidden");
                    }
                }
                initializeContainer(input, elem.container);
                break;
            }
        }
        // check default for select
        if (input instanceof HTMLSelectElement) {
            let option = input.querySelector("option[selected]");
            if (!option && input.options.length) {
                option = input.options[0];
            }
            if (option) {
                elem.defaultValue = option.getAttribute("value") || option.textContent || "";
            }
        }
    }
}
function addAllInput(selector) {
    // get input list
    let inputs;
    if (selector) {
        inputs = document.querySelectorAll(selector);
    }
    else {
        inputs = document.querySelectorAll("input, select");
    }
    // add each input that isn't a button
    Array.from(inputs).forEach((input) => {
        if (input.localName === "button") {
            // skip buttons (technically an input) for validation
            // some selectors may grab buttons too
            return;
        }
        addInput(input);
    });
}
function validateField(evt) {
    const input = evt.target;
    // validation has been run, consider dirty
    if (checkDirty(input)) {
        input.dataset.dirty = "true";
    }
    else {
        input.dataset.dirty = "false";
    }
    if (input.localName === "button") {
        // skip buttons (technically an input) for validation
        // (handled here) for when this is manually called
        input.dataset.valid = "true";
        return true;
    }
    if (input.container) {
        if (!input.errors) {
            // input isn't to be validated, skip, but mark valid for checking
            input.dataset.valid = "true";
            updateContainerClasses(input, input.container);
            return true;
        }
        // clear all old errors
        Array.from(input.errors.children).forEach((elem) => {
            if (!elem.classList.contains("hidden")) {
                elem.classList.add("hidden");
            }
        });
        // run validation checks
        let valid = true;
        for (let key in input.validity) {
            if (key === "valid" || key === "invalid") {
                continue;
            }
            // ValidityState type doesn't allow indexing by string, so this awkward type conversion is necessary
            if (input.validity[key]) {
                valid = false;
                const err = input.errors.querySelector(`[error="${key}"]`);
                if (err) {
                    err.classList.remove("hidden");
                }
            }
        }
        input.dataset.valid = "" + valid;
    }
    updateContainerClasses(input, input.container);
    return input.dataset.valid == "true";
}
function updateContainerClasses(input, container) {
    if (input && container) {
        // mark dirty input's
        markDirty(input, container);
        // mark validity state
        if (input.dataset.valid === "true") {
            container.classList.add("input-valid");
            container.classList.remove("input-invalid");
        }
        else {
            container.classList.remove("input-valid");
            container.classList.add("input-invalid");
        }
        markContent(input, container);
    }
}
function markDirty(input, container) {
    if (input.dataset.dirty === "true") {
        container.classList.add("input-dirty");
        container.classList.remove("input-pristine");
    }
    else {
        container.classList.remove("input-dirty");
    }
}
function markContent(input, container) {
    if (input.value || (input instanceof HTMLSelectElement && input.options[input.selectedIndex].textContent)) {
        container.classList.add("input-content");
        container.classList.remove("input-empty");
        container.classList.remove("input-placeholder");
    }
    else {
        container.classList.remove("input-content");
        container.classList.add("input-empty");
        if (input.hasAttribute("placeholder")) {
            container.classList.add("input-placeholder");
        }
        else {
            container.classList.remove("input-placeholder");
        }
    }
}
function initializeContainer(input, container) {
    container.classList.add("input-pristine");
    if (input.required) {
        container.classList.add("input-required");
    }
    else {
        container.classList.add("input-optional");
    }
    input.dataset.dirty = "" + checkDirty(input);
    markDirty(input, container);
    markContent(input, container);
}
function focusEvent(evt) {
    const input = evt.target;
    let elem = input;
    if (input.container) {
        elem = input.container;
    }
    if (elem.contains(document.activeElement)) {
        elem.classList.add("input-focused");
    }
    else {
        elem.classList.remove("input-focused");
    }
}
function checkDirty(input) {
    return input.value == input.defaultValue;
}


/***/ }),

/***/ "./client/utils/src/getter.ts":
/*!************************************!*\
  !*** ./client/utils/src/getter.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ get)
/* harmony export */ });
function get(path, context) {
    if (typeof path === "string") {
        return _get(path.split(/\.|\[|\]/), context);
    }
    else {
        console.error("unexpected template key: ", typeof path, path);
    }
    return context[path];
}
function _get(keys, context) {
    if (!context) {
        return context;
    }
    let key = keys.shift();
    while (key === "") {
        key = keys.shift();
    }
    if (!key) {
        return undefined;
    }
    switch (keys.length) {
        case 0:
            return context[key];
        default:
            return _get(keys, context[key]);
    }
}


/***/ }),

/***/ "./client/utils/src/iframe-actions.ts":
/*!********************************************!*\
  !*** ./client/utils/src/iframe-actions.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   displayAlertModal: () => (/* binding */ displayAlertModal),
/* harmony export */   displayIframeModal: () => (/* binding */ displayIframeModal),
/* harmony export */   navigateContainer: () => (/* binding */ navigateContainer),
/* harmony export */   reloadContainer: () => (/* binding */ reloadContainer)
/* harmony export */ });
/* harmony import */ var _iframe_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./iframe-client */ "./client/utils/src/iframe-client.ts");

function reloadContainer() {
    (0,_iframe_client__WEBPACK_IMPORTED_MODULE_0__.sendMessage)("reload", {});
}
function navigateContainer(href, newWindow) {
    (0,_iframe_client__WEBPACK_IMPORTED_MODULE_0__.sendMessage)("pageNavigate", {
        href,
        newWindow,
    });
}
let modalRef = null;
function displayAlertModal(params) {
    return new Promise((resolve, reject) => {
        sendModal(params, resolve, reject);
    });
}
function displayIframeModal(params) {
    return new Promise((resolve, reject) => {
        params.iframe = true;
        sendModal(params, resolve, reject);
    });
}
function sendModal(params, resolve, reject) {
    if (modalRef) {
        modalRef.reject(new Error("new modal invoked"));
        modalRef = null;
    }
    if (!params.key) {
        params.key = "" + Math.random();
    }
    modalRef = {
        key: params.key,
        resolve,
        reject,
    };
    (0,_iframe_client__WEBPACK_IMPORTED_MODULE_0__.sendMessage)("modal", params);
}
function _receiveMessage(event, data) {
    switch (data.type) {
        case "navigate":
            location.href = data.href;
            break;
        case "modalSuccess":
            if (modalRef && modalRef.key == data.key) {
                modalRef.resolve(data.data);
                modalRef = null;
            }
            break;
        case "modalError":
            if (modalRef && modalRef.key == data.key) {
                modalRef.reject(data.data);
                modalRef = null;
            }
            break;
    }
}
(0,_iframe_client__WEBPACK_IMPORTED_MODULE_0__.registerMessageProcessor)(_receiveMessage);


/***/ }),

/***/ "./client/utils/src/iframe-client.ts":
/*!*******************************************!*\
  !*** ./client/utils/src/iframe-client.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addConnectCallback: () => (/* binding */ addConnectCallback),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   isIframe: () => (/* binding */ isIframe),
/* harmony export */   registerMessageProcessor: () => (/* binding */ registerMessageProcessor),
/* harmony export */   sendMessage: () => (/* binding */ sendMessage),
/* harmony export */   setMinHeight: () => (/* binding */ setMinHeight),
/* harmony export */   setMinWidth: () => (/* binding */ setMinWidth)
/* harmony export */ });
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
window.BCUtil = window.BCUtil || {};
window.BCUtil.iframeClient = ((_a = window === null || window === void 0 ? void 0 : window.BCUtil) === null || _a === void 0 ? void 0 : _a.iframeClient) || {};
if (!((_c = (_b = window === null || window === void 0 ? void 0 : window.BCUtil) === null || _b === void 0 ? void 0 : _b.iframeClient) === null || _c === void 0 ? void 0 : _c.messageProcessors)) {
    window.BCUtil.iframeClient.messageProcessors = [];
}
if (!((_e = (_d = window === null || window === void 0 ? void 0 : window.BCUtil) === null || _d === void 0 ? void 0 : _d.iframeClient) === null || _e === void 0 ? void 0 : _e.queue)) {
    window.BCUtil.iframeClient.queue = [];
}
if (!((_g = (_f = window === null || window === void 0 ? void 0 : window.BCUtil) === null || _f === void 0 ? void 0 : _f.iframeClient) === null || _g === void 0 ? void 0 : _g.minWidth)) {
    window.BCUtil.iframeClient.minWidth = 0;
    if ((_h = document.body.dataset) === null || _h === void 0 ? void 0 : _h.minWidth) {
        try {
            window.BCUtil.iframeClient.minWidth = parseFloat(document.body.dataset.minWidth);
        }
        catch (e) {
            console.error("error parsing page minWidth default", e);
        }
    }
}
if (!((_k = (_j = window === null || window === void 0 ? void 0 : window.BCUtil) === null || _j === void 0 ? void 0 : _j.iframeClient) === null || _k === void 0 ? void 0 : _k.minHeight)) {
    window.BCUtil.iframeClient.minHeight = 0;
    if ((_l = document.body.dataset) === null || _l === void 0 ? void 0 : _l.minHeight) {
        try {
            window.BCUtil.iframeClient.minHeight = parseFloat(document.body.dataset.minHeight);
        }
        catch (e) {
            console.error("error parsing page minHeight default", e);
        }
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    sendMessage,
    registerMessageProcessor,
    setMinWidth,
    setMinHeight,
    isConnected,
});
function isConnected() {
    return !!window.BCUtil.iframeClient.container;
}
function sendMessage(type, message) {
    if (window.BCUtil.iframeClient.container) {
        window.BCUtil.iframeClient.container.postMessage(Object.assign({ type }, message), window.BCUtil.iframeClient.source);
    }
    else {
        window.BCUtil.iframeClient.queue.push(Object.assign({ type }, message));
    }
}
function registerMessageProcessor(processor) {
    window.BCUtil.iframeClient.messageProcessors.push(processor);
}
function sendQueue() {
    let msg = window.BCUtil.iframeClient.queue.shift();
    while (msg) {
        sendMessage(msg.type, msg);
        msg = window.BCUtil.iframeClient.queue.shift();
    }
}
function _receiveMessage(event) {
    var _a, _b;
    if (true) {
        console.log("received event: ", event);
    }
    let allowedSrc = ((_b = (_a = window.BCUtil) === null || _a === void 0 ? void 0 : _a.iframeClient) === null || _b === void 0 ? void 0 : _b.allowedSources) || (window === null || window === void 0 ? void 0 : window.allowedSources) || allowedSources;
    if (true) {
        console.log("allowed sources: ", allowedSrc);
    }
    if (!allowedSrc) {
        return;
    }
    // check origin
    let allowed = false;
    if (true) {
        console.log("origin: ", event.origin);
    }
    for (let i = 0; i < allowedSrc.length; i++) {
        if (true) {
            console.log("test: ", allowedSrc[i], " = ", allowedSrc[i].test(event.origin));
        }
        if (allowedSrc[i].test(event.origin)) {
            allowed = true;
            break;
        }
    }
    if (true) {
        console.log("origin allowed: ", allowed);
    }
    if (!allowed) {
        return;
    }
    // process message
    let data = event.data;
    if ((typeof event.data) === "string") {
        data = JSON.parse(event.data);
    }
    if (true) {
        console.log("event payload: ", data);
    }
    switch (data.type) {
        case "childReference":
            window.BCUtil.iframeClient.container = event.source;
            window.BCUtil.iframeClient.source = event.origin;
            sendDimensions();
            sendQueue();
            connectCallback.forEach((fn) => { fn(); });
            break;
        case "navigate":
            location.href = data.href;
            break;
        case "error":
            console.error("Error from container: ", event, data);
        default:
            window.BCUtil.iframeClient.messageProcessors.forEach((processor) => {
                processor(event, data);
            });
    }
}
function sendDimensions() {
    const height = Math.max(window.BCUtil.iframeClient.minHeight, document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight);
    const width = Math.max(window.BCUtil.iframeClient.minWidth, document.body.scrollWidth, document.body.offsetWidth, document.documentElement.clientWidth, document.documentElement.scrollWidth, document.documentElement.offsetWidth);
    sendMessage("childResponse", { height, width });
}
let connectCallback = [];
function addConnectCallback(fn) {
    connectCallback.push(fn);
}
function setMinWidth(width) {
    window.BCUtil.iframeClient.minWidth = width;
    // send dimensions in the event this was called after client connect
    sendDimensions();
}
function setMinHeight(height) {
    window.BCUtil.iframeClient.minHeight = height;
    // send dimensions in the event this was called after client connect
    sendDimensions();
}
function isIframe() {
    try {
        return window.self !== window.top;
    }
    catch (e) {
        return true;
    }
}
window.addEventListener('message', _receiveMessage);
window.addEventListener('resize', sendDimensions);


/***/ }),

/***/ "./client/utils/src/iframe-host.ts":
/*!*****************************************!*\
  !*** ./client/utils/src/iframe-host.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Frame: () => (/* binding */ Frame),
/* harmony export */   closeFrame: () => (/* binding */ closeFrame),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   getFrame: () => (/* binding */ getFrame),
/* harmony export */   newConnection: () => (/* binding */ newConnection)
/* harmony export */ });
const iFrames = [];
class Frame {
    constructor(element) {
        this.allowedSources = null;
        this._container = null;
        this._origin = "";
        this._processors = [];
        this._interval = 0;
        this._queue = [];
        this.connect = this.connect.bind(this);
        this.element = element;
        this._container = element.contentWindow;
        this._origin = element.getAttribute("src") || "";
        if (!this._origin) {
            console.error("provided link to invalid container, no origin provided");
        }
        else {
            if (this._origin.startsWith("/") || !this._origin.startsWith("http")) {
                this._origin = `${location.protocol}//${location.host}`; // origin does not include path
            }
        }
        this.element.addEventListener("load", this.connect);
        this.connect();
        iFrames.push(this);
    }
    sendMessage(type, message) {
        if (this._container && this._origin) {
            this._container.postMessage(Object.assign({ type }, message), this._origin);
        }
        else {
            this._queue.push(Object.assign({ type }, message));
        }
    }
    addMessageProcessor(processor) {
        this._processors.push(processor);
    }
    matchFrame(element) {
        return element === this.element;
    }
    messageRecipient(source, origin) {
        const sources = this.allowedSources || allowedSources || (window.BCUtil && window.BCUtil.allowedSources) || window.allowedSources;
        if (!sources || !sources.length) {
            return false;
        }
        if (!checkOrigin(sources, origin)) {
            return false;
        }
        // use startsWith check for origin as initializer may have path or query
        return source === this._container && this._origin.startsWith(origin);
    }
    processMessage(message, data) {
        if (data.type) {
            switch (data.type) {
                case "childResponse":
                    clearInterval(this._interval);
                    if (data.height && this.element && !this.element.dataset.noHeight) {
                        this.element.style.minHeight = data.height + "px";
                    }
                    if (data.width && this.element && !this.element.dataset.noWidth) {
                        this.element.style.minWidth = data.width + "px";
                    }
                    this._origin = message.origin;
                    this.sendQueue();
                    break;
                case "navigate":
                    this.connect();
                    break;
                case "error":
                    console.error("Error in iframe: ", message, data);
                default:
                    this._processors.forEach((callback) => {
                        callback(message, data);
                    });
                    break;
            }
        }
    }
    connect() {
        if (this._interval) {
            clearInterval(this._interval);
        }
        this._interval = window.setInterval(() => {
            this.sendMessage("childReference", {});
        }, 100);
    }
    sendQueue() {
        let msg = this._queue.shift();
        while (msg) {
            this.sendMessage(msg.type, msg);
            msg = this._queue.shift();
        }
    }
}
function newConnection(element) {
    return new Frame(element);
}
function getFrame(element) {
    for (let i = 0; i < iFrames.length; i++) {
        if (iFrames[i].matchFrame(element)) {
            return iFrames[i];
        }
    }
    return null;
}
function closeFrame(ref) {
    for (let i = 0; i < iFrames.length; i++) {
        if ((ref instanceof HTMLTimeElement && iFrames[i].matchFrame(ref)) || iFrames[i] === ref) {
            iFrames.splice(i, 1);
        }
    }
}
function _receiveMessage(event) {
    // process message
    let data = event.data;
    if ((typeof event.data) === "string") {
        data = JSON.parse(event.data);
    }
    iFrames.forEach((frame) => {
        if (frame.messageRecipient(event.source, event.origin)) {
            frame.processMessage(event, data);
        }
    });
}
function checkOrigin(sources, origin) {
    let allowed = false;
    for (let i = 0; i < sources.length; i++) {
        if (sources[i].test(origin)) {
            allowed = true;
            break;
        }
    }
    return allowed;
}
window.addEventListener('message', _receiveMessage);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    Frame,
    newConnection,
    getFrame,
});


/***/ }),

/***/ "./client/utils/src/location.ts":
/*!**************************************!*\
  !*** ./client/utils/src/location.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   decodeURLComponents: () => (/* binding */ decodeURLComponents),
/* harmony export */   findGetParameter: () => (/* binding */ findGetParameter)
/* harmony export */ });
function findGetParameter(parameterName) {
    var result = null, tmp = [];
    location.search
        .substr(1)
        .split("&")
        .forEach(function (item) {
        tmp = item.split("=");
        if (tmp[0] === parameterName)
            result = decodeURIComponent(tmp[1]);
    });
    return result;
}
function decodeURLComponents(param) {
    param = param.replaceAll("&#43;", " ");
    param = param.replaceAll("+", " ");
    return decodeURIComponent(param);
}


/***/ }),

/***/ "./client/utils/src/modals.ts":
/*!************************************!*\
  !*** ./client/utils/src/modals.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addIframeMessageProcessor: () => (/* binding */ addIframeMessageProcessor),
/* harmony export */   closeModal: () => (/* binding */ closeModal),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   displayAlertModal: () => (/* binding */ displayAlertModal),
/* harmony export */   displayConfirmModal: () => (/* binding */ displayConfirmModal),
/* harmony export */   displayCustomModal: () => (/* binding */ displayCustomModal),
/* harmony export */   displayIframeModal: () => (/* binding */ displayIframeModal),
/* harmony export */   displayPromptModal: () => (/* binding */ displayPromptModal)
/* harmony export */ });
/* harmony import */ var _iframe_host__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./iframe-host */ "./client/utils/src/iframe-host.ts");
/* harmony import */ var _getter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getter */ "./client/utils/src/getter.ts");


const modals = {
    id: 0,
    current: 0,
};
const processors = [];
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    displayAlertModal,
    displayConfirmModal,
    displayPromptModal,
    displayIframeModal,
    displayCustomModal,
    addIframeMessageProcessor,
});
function addIframeMessageProcessor(processor) {
    processors.push(processor);
}
function displayAlertModal(params) {
    return new Promise((resolve) => {
        // alert may not have cancel
        if (params.cancel) {
            params.cancel = undefined;
        }
        const ref = constructModalWrapper("alert", params, wrapContent(params.styles, constructBasicMessage("div", params)), null);
        modals[ref.id] = {
            type: "alert",
            id: ref.id,
            elem: ref.elem,
            resolve: resolve,
            reject: resolve,
        };
        openModal(modals[ref.id]);
    });
}
function displayConfirmModal(params) {
    return new Promise((resolve, reject) => {
        const ref = constructModalWrapper("confirm", params, wrapContent(params.styles, constructBasicMessage("div", params)), true, false);
        modals[ref.id] = {
            type: "confirm",
            id: ref.id,
            elem: ref.elem,
            resolve: resolve,
            reject: reject,
        };
        openModal(modals[ref.id]);
    });
}
function displayPromptModal(params) {
    return new Promise((resolve, reject) => {
        let message = constructBasicMessage("form", params);
        if (params.form instanceof HTMLFormElement) {
            message = params.form;
        }
        const ref = constructModalWrapper("prompt", params, wrapContent(params.styles, message), message, false);
        // populate input using returned ID
        if (!(params.form instanceof HTMLFormElement)) {
            const container = document.createElement("div");
            container.classList.add("input-container");
            const label = document.createElement("label");
            label.setAttribute("for", "modal-input-" + ref.id);
            label.textContent = params.form.label;
            container.appendChild(label);
            let input;
            if (params.form.type === "textarea") {
                input = document.createElement("textarea");
                if (params.form.value) {
                    input.textContent = params.form.value;
                }
            }
            else {
                input = document.createElement("input");
                input.setAttribute("type", params.form.type || "text");
                if (params.form.value) {
                    input.setAttribute("value", params.form.value);
                }
            }
            if (params.form.name) {
                input.setAttribute("name", params.form.name);
            }
            else {
                input.setAttribute("name", "modalInput");
            }
            input.setAttribute("id", "modal-input-" + ref.id);
            container.appendChild(input);
            message.appendChild(container);
        }
        message.addEventListener("submit", function (evt) {
            closeModal(ref.id, message);
        });
        modals[ref.id] = {
            type: "prompt",
            id: ref.id,
            elem: ref.elem,
            resolve: resolve,
            reject: reject,
        };
        openModal(modals[ref.id]);
    });
}
function displayIframeModal(params) {
    return new Promise((resolve, reject) => {
        // <iframe src="${params.href}" class="modal__message"></iframe>
        const elem = [];
        if (params.message || params.messageHTML) {
            elem.push(constructBasicMessage("div", params));
        }
        const frame = document.createElement("iframe");
        elem.push(frame);
        frame.classList.add("modal__message");
        frame.setAttribute("src", params.href);
        const ref = constructModalWrapper("iframe", params, wrapContent(params.styles, ...elem), true, false);
        const modal = {
            type: "iframe",
            id: ref.id,
            elem: ref.elem,
            window: frame,
            resolve: resolve,
            reject: reject,
        };
        modals[ref.id] = modal;
        openModal(modal);
        modal.frame = (0,_iframe_host__WEBPACK_IMPORTED_MODULE_0__.newConnection)(frame);
        modal.frame.addMessageProcessor(_receiveIFrameModalMessage);
        if (modal.window) {
            modal.window.focus();
        }
    });
}
function displayCustomModal(params) {
    return new Promise((resolve, reject) => {
        const ref = constructModalWrapper("custom", params, wrapContent(params.styles, constructBasicMessage("div", params)), true, false);
        const modal = {
            type: "custom",
            id: ref.id,
            elem: ref.elem,
            window: ref.elem.querySelector("iframe") || undefined,
            resolve: resolve,
            reject: reject,
        };
        modals[ref.id] = modal;
        openModal(modal);
        if (modal.window) {
            modal.frame = (0,_iframe_host__WEBPACK_IMPORTED_MODULE_0__.newConnection)(modal.window);
            modal.frame.addMessageProcessor(_receiveIFrameModalMessage);
            modal.window.focus();
        }
    });
}
function closeModal(id, result) {
    if (modals[id]) {
        if (result instanceof HTMLFormElement) {
            const form = {};
            for (let i = 0; i < result.elements.length; i++) {
                const input = result.elements.item(i);
                if (!input || input instanceof HTMLButtonElement) {
                    continue;
                }
                if (!(input instanceof HTMLInputElement)) {
                    form[input.getAttribute("name") || "" + i] = input.value;
                    continue;
                }
                switch (input.getAttribute("type")) {
                    case "date":
                        form[input.getAttribute("name") || "" + i] = input.valueAsDate;
                        break;
                    case "range":
                    case "number":
                        form[input.getAttribute("name") || "" + i] = input.valueAsNumber;
                        break;
                    case "checkbox":
                        form[input.getAttribute("name") || "" + i] = input.checked;
                        break;
                    case "radio":
                        if (input.checked) {
                            form[input.getAttribute("name") || "" + i] = input.value;
                        }
                        break;
                    case "file":
                        form[input.getAttribute("name") || "" + i] = input.files;
                        break;
                    case "image":
                    case "button":
                    case "reset":
                    case "submit":
                        continue;
                    default:
                        form[input.getAttribute("name") || "" + i] = input.value;
                }
            }
            result = form;
        }
        if (result) {
            modals[id].resolve(result);
        }
        else {
            modals[id].reject(result);
        }
        if (modals[id].interval) {
            clearInterval(modals[id].interval);
        }
        document.body.removeChild(modals[id].elem);
        delete modals[id];
        modals.current--;
        if (!modals.current) {
            document.body.classList.remove("open-modal");
        }
    }
}
function _receiveIFrameModalMessage(event, data) {
    let modal;
    for (let i = 0; i < modals.id; i++) {
        if (modals[i] && modals[i].window) {
            // @ts-ignore this line seems to trigger vscode linter despite the above line
            if (event.source === modals[i].window.contentWindow) {
                modal = modals[i];
            }
        }
    }
    if (!modal) {
        return;
    }
    // process message
    switch (data.type) {
        case "ok":
        case "done":
            closeModal(modal.id, data.result || true);
            break;
        case "close":
        case "cancel":
            closeModal(modal.id, data.result || false);
            break;
        default:
            processors.forEach((p) => {
                p(event, data, modal);
            });
    }
}
function constructModalWrapper(type, config, message, okRef, cancelRef) {
    var _a, _b, _c;
    // process message
    let replace = message.querySelectorAll("[data-replace]");
    replace.forEach((elem) => {
        var _a;
        if ((_a = elem.dataset) === null || _a === void 0 ? void 0 : _a.replace) {
            const val = (0,_getter__WEBPACK_IMPORTED_MODULE_1__["default"])(elem.dataset.replace, config.data);
            elem.innerText = val;
        }
    });
    replace = message.querySelectorAll("[attr-replace]");
    replace.forEach((elem) => {
        const attr = elem.getAttribute("attr-replace") || "";
        const tokens = attr.split(" ");
        tokens.forEach((tok) => {
            if (tok) {
                const sToks = tok.split(":");
                if (sToks.length >= 2) {
                    const val = (0,_getter__WEBPACK_IMPORTED_MODULE_1__["default"])(sToks[1], config.data);
                    elem.setAttribute(sToks[0], val);
                }
            }
        });
    });
    // construct wrapper
    const id = modals.id++;
    const container = document.createElement("div");
    container.classList.add("modal");
    addClasses(container, (_a = config.styles) === null || _a === void 0 ? void 0 : _a.root);
    // add overlay instead of aborting on root (avoid accidental event bubble)
    const overlay = document.createElement("div");
    overlay.classList.add("modal__overlay");
    addClasses(overlay, (_b = config.styles) === null || _b === void 0 ? void 0 : _b.overlay);
    container.onclick = function (evt) {
        if (evt.target == overlay) {
            closeModal(id);
        }
    };
    container.appendChild(overlay);
    const element = document.createElement("div");
    element.classList.add("modal__dialog");
    element.classList.add(`modal__${type}`);
    addClasses(element, (_c = config.styles) === null || _c === void 0 ? void 0 : _c.dialog);
    container.appendChild(element);
    element.appendChild(constructModalHeader(id, config.title, config.close, config.styles));
    element.appendChild(message);
    element.appendChild(constructModalActions(id, config.ok, okRef, config.cancel, cancelRef, config.styles));
    const list = element.querySelectorAll("[modal-id], [id*=\"{{modal_id}}\"]");
    list.forEach((elem) => {
        // find attribute and update
        if (elem.hasAttribute("modal-id")) {
            elem.setAttribute("modal-id", "" + id);
        }
        if (elem.matches("[id*=\"{{modal_id}}\"]")) {
            elem.setAttribute("id", (elem.getAttribute("id") || "{{modal_id}}").replace(/"?{{\s*modal_id\s*}}"?/g, "" + id));
        }
    });
    return {
        id,
        elem: container,
    };
}
function constructBasicMessage(type, conf) {
    const elem = document.createElement(type || "div");
    elem.classList.add("modal__message");
    if (conf.message) {
        elem.textContent = conf.message;
    }
    if (conf.messageHTML) {
        if (typeof conf.messageHTML === "string") {
            if (conf.message) {
                elem.innerHTML = `<p>${conf.message}</p>\n` + conf.messageHTML;
            }
            else {
                elem.innerHTML = conf.messageHTML;
            }
        }
        else {
            elem.appendChild(conf.messageHTML);
        }
    }
    return elem;
}
function wrapContent(styles, ...args) {
    const content = document.createElement("div");
    content.classList.add("modal__content");
    addClasses(content, styles === null || styles === void 0 ? void 0 : styles.content);
    for (let i = 0; i < args.length; i++) {
        content.appendChild(args[i]);
    }
    return content;
}
function constructModalHeader(id, title, close, styles) {
    // <div class="modal-title">${params.title} ${params.close ? `<button class="button fa fa-times primary"></button>` : ""}</div>
    const div = document.createElement("div");
    div.classList.add("modal__title");
    addClasses(div, styles === null || styles === void 0 ? void 0 : styles.title);
    div.textContent = title;
    if (close) {
        const btn = document.createElement("button");
        btn.classList.add("modal__close");
        addClasses(btn, styles === null || styles === void 0 ? void 0 : styles.close);
        btn.addEventListener("click", function (evt) {
            closeModal(id, false);
        });
        div.append(btn);
    }
    return div;
}
function constructModalActions(id, ok, okResult, cancel, cancelResult, styles) {
    // ${params.cancel || params.ok ? `<div class="row end modal-actions">
    //         ${params.cancel ? `<button result="false">${params.cancel || "Cancel"}</button>` : ""}
    //         ${params.ok ? `<button result="true">${params.ok || "OK"}</button>` : ""}
    //     </div>` : ""}
    if (!(ok || cancel)) {
        return new Text();
    }
    const div = document.createElement("div");
    div.classList.add("modal__actions");
    addClasses(div, styles === null || styles === void 0 ? void 0 : styles.actions);
    if (cancel) {
        const btn = document.createElement("button");
        btn.classList.add("modal__action-reject");
        addClasses(btn, styles === null || styles === void 0 ? void 0 : styles.reject);
        btn.innerHTML = cancel;
        btn.setAttribute("button-type", "cancel");
        btn.addEventListener("click", function (evt) {
            closeModal(id, cancelResult);
        });
        div.appendChild(btn);
    }
    if (ok) {
        const btn = document.createElement("button");
        btn.classList.add("modal__action-accept");
        addClasses(btn, styles === null || styles === void 0 ? void 0 : styles.accept);
        btn.innerHTML = ok;
        btn.setAttribute("button-type", "confirm");
        btn.addEventListener("click", function (evt) {
            closeModal(id, okResult);
        });
        div.appendChild(btn);
    }
    return div;
}
function openModal(modal) {
    document.body.appendChild(modal.elem);
    if (!modals.current) {
        document.body.classList.add("open-modal");
    }
    modals.current++;
    const elem = modal.elem.querySelector("a, button, input, textarea, select, details, [tabindex]:not([tabindex=\"-1\"])");
    if (elem) {
        elem.focus();
    }
}
function addClasses(element, classes) {
    if (!classes) {
        return;
    }
    if (Array.isArray(classes)) {
        element.classList.add(...classes);
    }
    else {
        element.classList.add(...classes.split(" "));
    }
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**************************************************!*\
  !*** ./client/scripts/customers/collect.page.ts ***!
  \**************************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_src_iframe_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/src/iframe-client */ "./client/utils/src/iframe-client.ts");
/* harmony import */ var _utils_src_modals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/src/modals */ "./client/utils/src/modals.ts");
/* harmony import */ var _utils_src_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/src/forms */ "./client/utils/src/forms.ts");
/* harmony import */ var _utils_src_after__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/src/after */ "./client/utils/src/after.ts");
/* harmony import */ var _util_overlay__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/overlay */ "./client/scripts/util/overlay.ts");
/* harmony import */ var _update__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./update */ "./client/scripts/customers/update.ts");
/* harmony import */ var _client_general__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../client-general */ "./client/scripts/client-general.ts");
var _a;







(0,_util_overlay__WEBPACK_IMPORTED_MODULE_4__.setupOverlay)();
_utils_src_iframe_client__WEBPACK_IMPORTED_MODULE_0__["default"].setMinWidth(((_a = document.body.dataset) === null || _a === void 0 ? void 0 : _a.minWidth) ? parseInt(document.body.dataset.minWidth) : 520);
(0,_utils_src_iframe_client__WEBPACK_IMPORTED_MODULE_0__.addConnectCallback)(_util_overlay__WEBPACK_IMPORTED_MODULE_4__.hideOverlay);
window.addEventListener("DOMContentLoaded", () => {
    _utils_src_forms__WEBPACK_IMPORTED_MODULE_2__["default"].addBySelector();
    const formList = document.querySelectorAll("[customer-update]");
    formList.forEach((form) => {
        new CustomerCollectPage(form);
    });
});
class CustomerCollectPage {
    constructor(root) {
        this.root = root;
        this.btnSubmit = this.btnSubmit.bind(this);
        let form;
        if (this.root.matches("[customer-update]")) {
            form = this.root;
        }
        else {
            form = this.root.querySelector("[customer-update]");
        }
        if (!form) {
        }
        this.form = new _update__WEBPACK_IMPORTED_MODULE_5__.CustomerDetailsBlock(form);
        _utils_src_iframe_client__WEBPACK_IMPORTED_MODULE_0__["default"].registerMessageProcessor((evt, data) => {
            switch (data.type) {
                case "submit":
                    this.processSubmission(data, data.key);
                    break;
                case "validate":
                    this.processValidateRequest(data.key);
                    break;
            }
        });
        this.submitBtn = this.root.querySelector('button[btn-submit]');
        if (this.submitBtn) {
            this.submitBtn.addEventListener("click", this.btnSubmit);
        }
    }
    btnSubmit(evt) {
        evt.preventDefault();
        this.processSubmission({ name: "", collect: true });
    }
    processValidateRequest(key) {
        const res = this.form.validateForm();
        if ((0,_utils_src_iframe_client__WEBPACK_IMPORTED_MODULE_0__.isIframe)()) {
            _utils_src_iframe_client__WEBPACK_IMPORTED_MODULE_0__["default"].sendMessage("validateResult", { key: key, result: res });
        }
    }
    processSubmission(prefill, key) {
        this.btnEnabled(false);
        if (this.result) {
            this.btnEnabled(true);
            sendResult(this.result, key);
            return;
        }
        if (!this.form.validateForm()) {
            this.btnEnabled(true);
            sendError({ state: "submitError", reason: "form not valid" }, key);
            return;
        }
        this.form.readForm(prefill)
            .then((details) => {
            var _a, _b, _c, _d;
            const data = {
                id: details.id || undefined,
                team: details.team || this.root.dataset.team || undefined,
                name: details.name,
                email: details.email,
                phone: details.phone,
                address: details.address ? {
                    // line2: details.address.line2,
                    line1: details.address.street,
                    city: details.address.locality,
                    state: details.address.region,
                    postCode: details.address.routing,
                    country: details.address.country,
                } : undefined,
                description: details.description,
                collect: details.collect,
                token: this.root.dataset.token,
                intent: "",
                method: "",
            };
            if (details.method) {
                data.intent = (_a = details.method) === null || _a === void 0 ? void 0 : _a.id;
                data.method = (typeof ((_b = details.method) === null || _b === void 0 ? void 0 : _b.payment_method) === "string" ? (_c = details.method) === null || _c === void 0 ? void 0 : _c.payment_method : ((_d = details.method) === null || _d === void 0 ? void 0 : _d.payment_method).id);
            }
            // console.log(data);
            // return;
            fetch("/payments/handler/details/collect?api=" + document.body.dataset.api, {
                body: JSON.stringify(data),
                credentials: "include",
                method: "POST",
            })
                .then((response) => {
                if (!response.ok) {
                    response.text()
                        .then((error) => {
                        sendError({ state: "submitError", reason: error }, key);
                        this.btnEnabled(true);
                    });
                    return;
                }
                response.json()
                    .then((body) => {
                    this.result = body;
                    sendResult(this.result, key);
                    this.btnEnabled(true);
                });
            })
                .catch((error) => {
                sendError({ state: "submitError", reason: error.message || error }, key);
                this.btnEnabled(true);
            });
        })
            .catch((error) => {
            sendError(error, key);
            this.btnEnabled(true);
        });
    }
    btnEnabled(state) {
        if (this.submitBtn) {
            this.submitBtn.disabled = !state;
        }
    }
}
function sendResult(result, key) {
    if ((0,_utils_src_iframe_client__WEBPACK_IMPORTED_MODULE_0__.isIframe)()) {
        // notify container
        _utils_src_iframe_client__WEBPACK_IMPORTED_MODULE_0__["default"].sendMessage("submitDone", { key: key, result: result });
    }
    (0,_utils_src_after__WEBPACK_IMPORTED_MODULE_3__.resolvePostPageAction)(result, () => { });
}
function sendError(error, key) {
    if (!(0,_utils_src_iframe_client__WEBPACK_IMPORTED_MODULE_0__.isIframe)()) {
        console.error(error);
        _utils_src_modals__WEBPACK_IMPORTED_MODULE_1__["default"].displayAlertModal({
            title: "Error saving details",
            message: getErrorMessage(error),
            ok: "OK",
        });
        return;
    }
    if (typeof error === "string") {
        _utils_src_iframe_client__WEBPACK_IMPORTED_MODULE_0__["default"].sendMessage("submitError", { key: key, reason: error });
    }
    else {
        error.key = key;
        _utils_src_iframe_client__WEBPACK_IMPORTED_MODULE_0__["default"].sendMessage("submitError", error);
    }
}
function getErrorMessage(error) {
    return error.reason.message || error.reason || error.message || error;
}

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,